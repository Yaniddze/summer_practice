{"version":3,"sources":["elements/title/styles.module.css","bus/starships/reducer.ts","init/rootReducer.ts","bus/starships/types.ts","bus/starships/actions.ts","workers/makeRequestWithSpinner.ts","api/index.ts","api/config.ts","bus/starships/saga/workers/fetchStarships.ts","bus/starships/saga/index.ts","init/rootSaga.ts","init/middleware.ts","init/store.ts","bus/starships/hooks/useStarshipsFetch.ts","elements/title/index.tsx","bus/starships/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","initialState","data","results","isFetching","error","rootReducer","combineReducers","starships","state","action","type","payload","start","finish","fill","makeRequestWithSpinner","options","fetcher","fetcherParam","put","call","result","message","api","fetch","axios","get","then","map","starship","name","summary","fetchStarships","watchFetchStarships","watchStarships","takeEvery","all","rootSaga","fork","sagaMiddleware","createLogger","duration","collapsed","colors","title","prevState","nextState","createSagaMiddleware","middleware","store","createStore","composeWithDevTools","applyMiddleware","run","Title","children","className","styles","Starships","dispatch","useDispatch","useSelector","useEffect","useStarshipsFetch","errorMessageJSX","loaderJSX","listJSX","index","key","Number","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.3c3bd5a7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"styles_title__2YosF\"};","// Types\nimport {\n  ErrorHttpAction,\n  Starships,\n  STARSHIPS_ERROR,\n  STARSHIPS_FETCH_ASYNC,\n  STARSHIPS_FILL,\n  STARSHIPS_FINISH,\n  STARSHIPS_START,\n  StarshipsActionTypes,\n} from './types';\n\nexport type StarshipState = {\n  data: Starships;\n  isFetching: boolean;\n  error: false | ErrorHttpAction;\n};\n\nconst initialState: StarshipState = {\n  data: {\n    results: [],\n  },\n  isFetching: false,\n  error: false,\n};\n\nexport const starshipsReducer = (\n    state = initialState,\n    action: StarshipsActionTypes,\n): StarshipState => {\n  switch (action.type) {\n    case STARSHIPS_START:\n      return {\n        ...state,\n        error: false,\n        isFetching: true,\n      };\n\n    case STARSHIPS_FINISH:\n      return {\n        ...state,\n        error: false,\n        isFetching: false,\n      };\n\n    case STARSHIPS_ERROR:\n      return {\n        ...state,\n        isFetching: false,\n        error: action.payload,\n      };\n\n    case STARSHIPS_FILL:\n      return {\n        ...state,\n        error: false,\n        isFetching: false,\n        data: {\n          ...action.payload,\n        },\n      };\n\n    case STARSHIPS_FETCH_ASYNC:\n      return state;\n\n    default:\n      // eslint-disable-next-line no-case-declarations,@typescript-eslint/no-unused-vars\n      const x: never = action;\n  }\n  return state;\n};\n","// Core\nimport { combineReducers } from 'redux';\n\n// Reducers\nimport { starshipsReducer as starships } from '../bus/starships/reducer';\n\nexport const rootReducer = combineReducers({\n  starships,\n});\n\nexport type AppState = ReturnType<typeof rootReducer>;\n","export type Starship = {\n  name: string;\n};\n\nexport type Starships = {\n  results: Starship[];\n};\n\nexport type ErrorHttpAction = string;\n\n// Sync\nexport const STARSHIPS_START = 'STARSHIPS_START';\ntype StarshipsStartAction = {\n  type: typeof STARSHIPS_START;\n};\n\nexport const STARSHIPS_FINISH = 'STARSHIPS_FINISH';\ntype StarshipsFinishAction = {\n  type: typeof STARSHIPS_FINISH;\n};\n\nexport const STARSHIPS_FILL = 'STARSHIPS_FILL';\nexport type StarshipsFillAction = {\n  type: typeof STARSHIPS_FILL;\n  payload: Starships;\n};\n\nexport const STARSHIPS_ERROR = 'STARSHIPS_ERROR';\nexport type StarshipsErrorAction = {\n  type: typeof STARSHIPS_ERROR;\n  error: true;\n  payload: ErrorHttpAction;\n};\n\n// Async\nexport const STARSHIPS_FETCH_ASYNC = 'STARSHIPS_FETCH_ASYNC';\ntype StarshipsFetchAsyncAction = {\n  type: typeof STARSHIPS_FETCH_ASYNC;\n};\n\nexport type StarshipsActionTypes =\n    | StarshipsStartAction\n    | StarshipsFinishAction\n    | StarshipsFillAction\n    | StarshipsErrorAction\n    | StarshipsFetchAsyncAction;\n","// Types\nimport {\n  ErrorHttpAction,\n  Starships,\n  STARSHIPS_ERROR,\n  STARSHIPS_FETCH_ASYNC,\n  STARSHIPS_FILL,\n  STARSHIPS_FINISH,\n  STARSHIPS_START,\n  StarshipsActionTypes,\n  StarshipsErrorAction,\n  StarshipsFillAction,\n} from './types';\n\n// Sync\nexport function start(): StarshipsActionTypes {\n  return {\n    type: STARSHIPS_START,\n  };\n}\n\nexport function finish(): StarshipsActionTypes {\n  return {\n    type: STARSHIPS_FINISH,\n  };\n}\n\nexport function fill(payload: Starships): StarshipsFillAction {\n  return {\n    type: STARSHIPS_FILL,\n    payload,\n  };\n}\n\nexport function error(payload: ErrorHttpAction): StarshipsErrorAction {\n  return {\n    type: STARSHIPS_ERROR,\n    error: true,\n    payload,\n  };\n}\n\n// Async\nexport function fetchAsync(): StarshipsActionTypes {\n  return {\n    type: STARSHIPS_FETCH_ASYNC,\n  };\n}\n","// Core\nimport { ActionCreator, AnyAction } from 'redux';\nimport { SagaIterator } from '@redux-saga/core';\nimport { put, call } from 'redux-saga/effects';\n\n// Common types\nimport { FillActionType, ErrorActionType } from '../types';\n\ntype OptionsType<T> = {\n  fetcher: (uri?: string) => Promise<T>;\n  fetcherParam?: string;\n  start: ActionCreator<AnyAction>;\n  finish: ActionCreator<AnyAction>;\n  fill: FillActionType<T>;\n  error: ErrorActionType;\n};\n\nexport function* makeRequestWithSpinner<T>(options: OptionsType<T>): SagaIterator {\n  const {\n    fetcher, start, fetcherParam, fill, finish, error,\n  } = options;\n\n  try {\n    yield put(start());\n\n    const result = yield call(fetcher, fetcherParam);\n\n    yield put(fill(result));\n  } catch (e) {\n    yield put(error(e.message));\n  } finally {\n    yield put(finish());\n  }\n}\n","import axios from 'axios';\nimport { root } from './config';\nimport { Starships } from '../bus/starships/types';\n\nexport type FetchDataType<T> = () => Promise<T>;\n\ntype APIFetchDataType = {\n  starships: {\n    fetch: FetchDataType<Starships>;\n  };\n};\n\nexport const api: APIFetchDataType = {\n  starships: {\n    fetch: (): Promise<Starships> => axios.get(`${root}/weatherforecast`).then((result) => {\n      const data = result.data.map((starship: any) => ({ name: starship.summary }));\n      return { results: data };\n    }),\n  },\n};\n","export const root = 'http://gateway:8080';\n","// Tools\nimport {\n  start, finish, fill, error,\n} from '../../actions';\nimport { Starships } from '../../types';\n\n// Workers\nimport { makeRequestWithSpinner } from '../../../../workers';\n\n// API\nimport { api } from '../../../../api';\n\nexport function* fetchStarships(): Generator {\n  const options = {\n    fetcher: api.starships.fetch,\n    start,\n    finish,\n    fill,\n    error,\n  };\n\n  yield makeRequestWithSpinner<Starships>(options);\n}\n","// Core\nimport { SagaIterator } from '@redux-saga/core';\nimport { takeEvery, all, call } from 'redux-saga/effects';\n\n// Types\nimport { STARSHIPS_FETCH_ASYNC } from '../types';\n\n// Workers\nimport { fetchStarships } from './workers';\n\nfunction* watchFetchStarships(): SagaIterator {\n  yield takeEvery(STARSHIPS_FETCH_ASYNC, fetchStarships);\n}\n\nexport function* watchStarships(): Generator {\n  yield all([call(watchFetchStarships)]);\n}\n","// Core\nimport { all, fork } from 'redux-saga/effects';\n\n// Watchers\nimport { watchStarships } from '../bus/starships/saga';\n\nexport function* rootSaga(): Generator {\n  yield all([fork(watchStarships)]);\n}\n","// Core\nimport { createLogger } from 'redux-logger';\nimport { Middleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nexport const logger = createLogger({\n  duration: true,\n  collapsed: true,\n  colors: {\n    title: (action): string => (action.error ? 'firebrick' : 'deepskyblue'),\n    prevState: (): string => '#1C5FAF',\n    action: (): string => '#149945',\n    nextState: (): string => '#A47104',\n    error: (): string => '#ff0005',\n  },\n});\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst devEnvironment = process.env.NODE_ENV === 'development';\n\nconst middleware: Middleware[] = [sagaMiddleware];\n\nif (devEnvironment) {\n  middleware.push(logger);\n}\n\nexport { middleware, sagaMiddleware };\n","// Core\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\n\n// Instruments\nimport { rootReducer } from './rootReducer';\nimport { rootSaga } from './rootSaga';\nimport { middleware, sagaMiddleware } from './middleware';\n\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(...middleware)));\n\nsagaMiddleware.run(rootSaga);\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { fetchAsync } from '../actions';\nimport { StarshipState } from '../reducer';\nimport { AppState } from '../../../init/rootReducer';\n\nexport const useStarshipsFetch = (): StarshipState => {\n  const dispatch = useDispatch();\n  const { data, isFetching, error } = useSelector<AppState, StarshipState>(\n    (state) => state.starships,\n  );\n\n  useEffect(() => {\n    dispatch(fetchAsync());\n  }, [dispatch]);\n\n  return {\n    data,\n    isFetching,\n    error,\n  };\n};\n","import React, { FC } from 'react';\nimport styles from './styles.module.css';\n\ntype Props = {\n  children: string;\n};\n\nexport const Title: FC<Props> = ({ children }: Props) => (\n  <>\n    <h1 className={styles.title}>{children}</h1>\n  </>\n);\n","import React, { ReactElement, FC } from 'react';\nimport { useStarshipsFetch } from './hooks/useStarshipsFetch';\nimport { Title } from '../../elements/title';\nimport { Starship } from './types';\n\nexport const Starships: FC = () => {\n  const { isFetching, data, error } = useStarshipsFetch();\n\n  const errorMessageJSX = error && <p>Not found!</p>;\n  const loaderJSX = isFetching && <p>Loading data from API...</p>;\n  const listJSX = isFetching\n      || data.results?.map(\n          ({ name }: Starship, index: number): ReactElement => <li key={Number(index)}>{name}</li>,\n      );\n\n  return (\n    <>\n      <Title>Starships</Title>\n      {errorMessageJSX}\n      {loaderJSX}\n      <ul>{listJSX}</ul>\n    </>\n  );\n};\n","// Core\nimport React, { ReactElement } from 'react';\nimport { Provider } from 'react-redux';\n\n// Other\nimport { store } from './init/store';\n\n// Domains\nimport { Starships } from './bus/starships';\n\nexport function App(): ReactElement {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <Starships />\n      </div>\n    </Provider>\n\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}